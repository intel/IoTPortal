#
# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: MIT
#

version: "3.9"
services:
  app:
    build:
      context: ./
      dockerfile: docker-compose/app/Dockerfile.staging
      args:
        - COMPOSER_VERSION=${COMPOSER_VERSION}
        - PHP_VERSION=${PHP_VERSION}
        - LOCAL_UID=${LOCAL_UID}
        - LOCAL_GID=${LOCAL_GID}
    image: inteliotportal-app
    container_name: inteliotportal-app
    labels:
      - "com.iotportal.product=iotportal"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    read_only: true
    depends_on:
      - ${DB_HOST}
      - ${MQTT_HOST}
      - ${REDIS_HOST}
    environment:
      CONTAINER_ROLE: app
    volumes:
      - ../iotportaldata/env/.env:/var/www/.env
      - ../iotportaldata/app/storage/app:/var/www/storage/app
      - ../iotportaldata/app/storage/framework:/var/www/storage/framework
      - ../iotportaldata/ca-certificates:/iotportal/ca-certificates
    networks:
      - inteliotportal

  mysql:
    build:
      context: ./
      dockerfile: docker-compose/mysql/Dockerfile.staging
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
        - MYSQL_SSL_CA=${MYSQL_SSL_CA}
        - MYSQL_SSL_CERT=${MYSQL_SSL_CERT}
        - MYSQL_SSL_KEY=${MYSQL_SSL_KEY}
        - LOCAL_UID=${LOCAL_UID}
        - LOCAL_GID=${LOCAL_GID}
    image: inteliotportal-mysql
    container_name: inteliotportal-mysql
    labels:
      - "com.iotportal.product=iotportal"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    read_only: true
    environment:
      MYSQL_DATABASE: '${MYSQL_DATABASE}'
      MYSQL_USER: '${MYSQL_USER}'
      MYSQL_PASSWORD: '${MYSQL_PASSWORD}'
      MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
    volumes:
      - ../iotportaldata/mysql/data:/var/lib/mysql
      - ../iotportaldata/ssl:/mysql/ssl
    tmpfs:
      - /tmp:uid=${LOCAL_UID},gid=${LOCAL_GID}
      - /run/mysqld:uid=${LOCAL_UID},gid=${LOCAL_GID}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    networks:
      - inteliotportal

  nginx:
    build:
      context: ./
      dockerfile: docker-compose/nginx/Dockerfile.staging
      args:
        - NGINX_VERSION=${NGINX_VERSION}
        - CHANGE_SOURCE=${NGINX_CHANGE_SOURCE}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - LOCAL_UID=${LOCAL_UID}
        - LOCAL_GID=${LOCAL_GID}
        - http_proxy
        - https_proxy
        - no_proxy
    image: inteliotportal-nginx
    container_name: inteliotportal-nginx
    labels:
      - "com.iotportal.product=iotportal"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    read_only: true
    depends_on:
      - ${NGINX_PHP_UPSTREAM_CONTAINER}
    volumes:
      - ../iotportaldata/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../iotportaldata/nginx/sites-available:/etc/nginx/sites-available
      - ../iotportaldata/ssl:/etc/nginx/ssl
    tmpfs:
      - /var/cache/nginx:uid=${LOCAL_UID},gid=${LOCAL_GID}
      - /run:uid=${LOCAL_UID},gid=${LOCAL_GID}
    ports:
      - "${NGINX_HTTP_PORT:-80}:8080"
      - "${NGINX_HTTPS_PORT:-443}:8443"
    networks:
      - inteliotportal

  vernemq:
    build:
      context: ./
      dockerfile: docker-compose/vernemq/Dockerfile.staging
      args:
        - VERNEMQ_VERSION=${VERNEMQ_VERSION}
        - LOCAL_UID=${LOCAL_UID}
        - LOCAL_GID=${LOCAL_GID}
    image: inteliotportal-vernemq
    container_name: inteliotportal-vernemq
    labels:
      - "com.iotportal.product=iotportal"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    read_only: true
    environment:
      DOCKER_VERNEMQ_ACCEPT_EULA: '${VERNEMQ_ACCEPT_EULA}'
      DOCKER_VERNEMQ_ALLOW_ANONYMOUS: '${VERNEMQ_ALLOW_ANONYMOUS}'
      DOCKER_VERNEMQ_LOG__CONSOLE: 'console'
      DOCKER_VERNEMQ_SYSTREE_ENABLED: '${VERNEMQ_SYSTREE_ENABLED}'
      DOCKER_VERNEMQ_LISTENER__SSL__CAFILE: '${VERNEMQ_LISTENER_SSL_CAFILE}'
      DOCKER_VERNEMQ_LISTENER__SSL__CERTFILE: '${VERNEMQ_LISTENER_SSL_CERTFILE}'
      DOCKER_VERNEMQ_LISTENER__SSL__KEYFILE: '${VERNEMQ_LISTENER_SSL_KEYFILE}'
      DOCKER_VERNEMQ_PLUGINS__VMQ_ACL: '${VERNEMQ_PLUGINS_VMQ_ACL}'
      DOCKER_VERNEMQ_PLUGINS__VMQ_WEBHOOKS: '${VERNEMQ_PLUGINS_VMQ_WEBHOOKS}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_REGISTER__HOOK: '${VERNEMQ_VMQ_WEBHOOKS_AUTH_ON_REGISTER_HOOK}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_REGISTER__ENDPOINT: '${VERNEMQ_VMQ_WEBHOOKS_AUTH_ON_REGISTER_ENDPOINT}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_SUBSCRIBE__HOOK: '${VERNEMQ_VMQ_WEBHOOKS_AUTH_ON_SUBSCRIBE_HOOK}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_SUBSCRIBE__ENDPOINT: '${VERNEMQ_VMQ_WEBHOOKS_AUTH_ON_SUBSCRIBE_ENDPOINT}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_PUBLISH__HOOK: '${VERNEMQ_VMQ_WEBHOOKS_AUTH_ON_PUBLISH_HOOK}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__AUTH_ON_PUBLISH__ENDPOINT: '${VERNEMQ_VMQ_WEBHOOKS_AUTH_ON_PUBLISH_ENDPOINT}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_OFFLINE__HOOK: '${VERNEMQ_VMQ_WEBHOOKS_ON_CLIENT_OFFLINE_HOOK}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_OFFLINE__ENDPOINT: '${VERNEMQ_VMQ_WEBHOOKS_ON_CLIENT_OFFLINE_ENDPOINT}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_GONE__HOOK: '${VERNEMQ_VMQ_WEBHOOKS_ON_CLIENT_GONE_HOOK}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__ON_CLIENT_GONE__ENDPOINT: '${VERNEMQ_VMQ_WEBHOOKS_ON_CLIENT_GONE_ENDPOINT}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__CAFILE: '${VERNEMQ_VMQ_WEBHOOKS_CAFILE}'
      DOCKER_VERNEMQ_VMQ_WEBHOOKS__USE_CRLS: '${VERNEMQ_VMQ_WEBHOOKS_USE_CRLS}'
    volumes:
      - ../iotportaldata/vernemq/etc:/vernemq/etc
      - ../iotportaldata/vernemq/data:/vernemq/data
      - ../iotportaldata/ssl:/vernemq/ssl
    tmpfs:
      - /tmp:uid=${LOCAL_UID},gid=${LOCAL_GID}
    ports:
      - "${VERNEMQ_TCP_PORT:-1883}:1883"
      - "${VERNEMQ_SSL_PORT:-8883}:8883"
    networks:
      - inteliotportal

  redis:
    build:
      context: ./
      dockerfile: docker-compose/redis/Dockerfile.staging
      args:
        - REDIS_VERSION=${DOCKER_REDIS_VERSION}
        - LOCAL_UID=${LOCAL_UID}
        - LOCAL_GID=${LOCAL_GID}
    image: inteliotportal-redis
    container_name: inteliotportal-redis
    labels:
      - "com.iotportal.product=iotportal"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    read_only: true
    environment:
      REDIS_PASSWORD: '${DOCKER_REDIS_PASSWORD}'
    volumes:
      - ../iotportaldata/redis/data:/data
      - ../iotportaldata/redis/conf:/usr/local/etc/redis
      - ../iotportaldata/ca-certificates:/ca-certificates
    ports:
      - "${DOCKER_REDIS_PORT:-6379}:6379"
    networks:
      - inteliotportal

  horizon:
    image: inteliotportal-app
    container_name: inteliotportal-horizon
    labels:
      - "com.iotportal.product=iotportal"
    logging:
      driver: "json-file"
      options:
        max-size: "500k"
        max-file: "10"
    restart: always
    read_only: true
    depends_on:
      - app
      - ${DB_HOST}
      - ${MQTT_HOST}
      - ${REDIS_HOST}
    environment:
      CONTAINER_ROLE: horizon
    volumes:
      - ../iotportaldata/env/.env:/var/www/.env
      - ../iotportaldata/app/storage/app:/var/www/storage/app
      - ../iotportaldata/app/storage/framework:/var/www/storage/framework
      - ../iotportaldata/ca-certificates:/iotportal/ca-certificates
    networks:
      - inteliotportal

#  Enable only development environment
#  phpmyadmin:
#    image: phpmyadmin/phpmyadmin:${PMA_VERSION}
#    container_name: inteliotportal-phpmyadmin
#    restart: always
#    depends_on:
#      - '${DB_CONNECTION}'
#    environment:
#      PMA_ARBITRARY: '${PMA_ARBITRARY}'
#    ports:
#      - "${PMA_PORT:-8081}:80"
#    networks:
#      - inteliotportal

networks:
  inteliotportal:
    driver: bridge